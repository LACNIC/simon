# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2020-10-08 06:56
from __future__ import unicode_literals

import datetime
from django.db import migrations, models
import django.db.models.deletion
import simon_app.models.management


class Migration(migrations.Migration):

    replaces = [('simon_app', '0001_initial'), ('simon_app', '0002_auto_20201007_1502'), ('simon_app', '0003_auto_20201007_1507'), ('simon_app', '0004_auto_20201008_0317'), ('simon_app', '0005_auto_20201008_0319'), ('simon_app', '0006_auto_20201008_0352'), ('simon_app', '0007_auto_20201008_0355')]

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asn', models.IntegerField(default=0)),
                ('network', models.GenericIPAddressField(blank=True, null=True)),
                ('pfx_length', models.IntegerField(default=0)),
                ('date_updated', models.DateTimeField(null=True)),
                ('regional', models.NullBooleanField()),
            ],
            options={
                'verbose_name': 'Sistema Autonomo',
                'verbose_name_plural': 'Sistemas Autonomos',
            },
        ),
        migrations.CreateModel(
            name='Chart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='CommandAudit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('command', models.CharField(max_length=100)),
                ('description', models.TextField(default=b'Everything OK', max_length=10240)),
                ('date', models.DateTimeField(default=simon_app.models.management.now)),
                ('status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Configs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('config_name', models.TextField()),
                ('config_value', models.TextField()),
                ('config_description', models.TextField()),
            ],
            options={
                'verbose_name': 'Configuracion',
                'verbose_name_plural': 'Configuraciones',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iso', models.CharField(max_length=2)),
                ('name', models.CharField(max_length=80)),
                ('printable_name', models.CharField(max_length=80)),
                ('iso3', models.CharField(blank=True, max_length=3, null=True)),
                ('numcode', models.IntegerField(null=True)),
            ],
            options={
                'verbose_name': 'Pais',
                'verbose_name_plural': 'Paises',
            },
        ),
        migrations.CreateModel(
            name='HttpsCheck',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('status', models.NullBooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Chequeo HTTPS',
                'verbose_name_plural': 'Chequeos HTTPS',
            },
        ),
        migrations.CreateModel(
            name='Images',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.IntegerField(null=True)),
                ('width', models.IntegerField(null=True)),
                ('height', models.IntegerField(null=True)),
                ('type', models.TextField()),
                ('timeout', models.IntegerField(null=True)),
                ('online', models.BooleanField(default=True)),
                ('name', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Images_in_TestPoints',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_path', models.TextField()),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='simon_app.Images')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(default=b'')),
                ('text', models.TextField(default=b'')),
                ('date_created', models.DateTimeField(default=datetime.datetime.now)),
            ],
        ),
        migrations.CreateModel(
            name='OfflineReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('date_reported', models.DateTimeField(verbose_name=b'report date')),
                ('report_count', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Params',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('config_name', models.TextField()),
                ('config_value', models.TextField()),
            ],
            options={
                'verbose_name': 'Parametro',
                'verbose_name_plural': 'Parametros',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('numcode', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Results',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_test', models.DateTimeField(default=datetime.datetime.now, verbose_name=b'test date')),
                ('version', models.IntegerField(default=0, null=True)),
                ('ip_origin', models.GenericIPAddressField(null=True)),
                ('ip_destination', models.GenericIPAddressField(null=True)),
                ('testype', models.CharField(default=b'N/A', max_length=20)),
                ('number_probes', models.IntegerField(null=True)),
                ('min_rtt', models.IntegerField(null=True)),
                ('max_rtt', models.IntegerField(null=True)),
                ('ave_rtt', models.IntegerField(null=True)),
                ('dev_rtt', models.IntegerField(null=True)),
                ('median_rtt', models.IntegerField(null=True)),
                ('packet_loss', models.IntegerField(null=True)),
                ('country_origin', models.CharField(max_length=2)),
                ('country_destination', models.CharField(max_length=2)),
                ('ip_version', models.IntegerField(default=0)),
                ('tester', models.CharField(max_length=20)),
                ('tester_version', models.CharField(max_length=10)),
                ('as_origin', models.IntegerField(null=True)),
                ('as_destination', models.IntegerField(null=True)),
                ('user_agent', models.CharField(default=b'', max_length=2000)),
                ('url', models.CharField(default=b'', max_length=2083, null=True)),
                ('url_host', models.CharField(default=b'', max_length=2083, null=True)),
            ],
            options={
                'verbose_name': 'Resultado',
                'verbose_name_plural': 'Resultados',
            },
        ),
        migrations.CreateModel(
            name='RipeAtlasProbe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('probe_id', models.IntegerField(null=True)),
                ('country_code', models.CharField(max_length=2, null=True)),
                ('asn_v4', models.IntegerField(null=True)),
                ('asn_v6', models.IntegerField(null=True)),
                ('prefix_v4', models.GenericIPAddressField(null=True)),
                ('prefix_v6', models.GenericIPAddressField(null=True)),
            ],
            options={
                'verbose_name': 'RIPE Atlas Probe',
                'verbose_name_plural': 'RIPE Atlas Probes',
            },
        ),
        migrations.CreateModel(
            name='RipeAtlasProbeStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField()),
                ('status', models.CharField(max_length=20, null=True)),
                ('probe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='simon_app.RipeAtlasProbe')),
            ],
        ),
        migrations.CreateModel(
            name='TestPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(default=b'', null=True)),
                ('testtype', models.CharField(max_length=20, null=True)),
                ('ip_address', models.GenericIPAddressField(null=True)),
                ('country', models.CharField(max_length=2, null=True)),
                ('enabled', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField(default=datetime.datetime.now, help_text=b'Date added', null=True)),
                ('url', models.TextField(null=True)),
                ('city', models.CharField(max_length=100, null=True)),
                ('latitude', models.FloatField(default=0.0, null=True)),
                ('longitude', models.FloatField(default=0.0, null=True)),
            ],
            options={
                'verbose_name': 'Punto de prueba',
                'verbose_name_plural': 'Puntos de prueba',
            },
        ),
        migrations.CreateModel(
            name='ThroughputResults',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_test', models.DateTimeField(verbose_name=b'test date')),
                ('ip_origin', models.GenericIPAddressField()),
                ('ip_destination', models.GenericIPAddressField()),
                ('testype', models.CharField(max_length=20)),
                ('time', models.IntegerField(null=True)),
                ('size', models.IntegerField(null=True)),
                ('country_origin', models.CharField(max_length=2)),
                ('country_destination', models.CharField(max_length=2)),
                ('ip_version', models.IntegerField()),
                ('tester', models.CharField(max_length=20)),
                ('tester_version', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='TracerouteResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_origin', models.GenericIPAddressField(null=True)),
                ('ip_destination', models.GenericIPAddressField(null=True)),
                ('as_origin', models.IntegerField(null=True)),
                ('as_destination', models.IntegerField(null=True)),
                ('country_origin', models.CharField(max_length=2)),
                ('country_destination', models.CharField(max_length=2)),
                ('output', models.TextField(default=b'', max_length=2000)),
            ],
        ),
        migrations.CreateModel(
            name='V6Perf',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=datetime.datetime.now)),
                ('time_window', models.IntegerField(default=30)),
                ('diff', models.FloatField(default=0.0)),
                ('dualstack', models.FloatField(default=0.0)),
                ('v6_rate', models.FloatField(default=0.0)),
                ('country', models.CharField(max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('notification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='simon_app.Notification')),
            ],
            bases=('simon_app.notification',),
        ),
        migrations.CreateModel(
            name='Error',
            fields=[
                ('notification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='simon_app.Notification')),
            ],
            bases=('simon_app.notification',),
        ),
        migrations.CreateModel(
            name='ProbeApiAudit',
            fields=[
                ('commandaudit_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='simon_app.CommandAudit')),
                ('count', models.IntegerField(default=0, help_text=b'Amount of results stored in the DB.', verbose_name=b'Result count')),
            ],
            bases=('simon_app.commandaudit',),
        ),
        migrations.CreateModel(
            name='ProbeApiPingResult',
            fields=[
                ('results_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='simon_app.Results')),
            ],
            options={
                'verbose_name': 'Resultado ProbeAPI',
                'verbose_name_plural': 'Resultados ProbeAPI',
            },
            bases=('simon_app.results',),
        ),
        migrations.CreateModel(
            name='SpeedtestTestPoint',
            fields=[
                ('testpoint_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='simon_app.TestPoint')),
                ('speedtest_url', models.TextField(null=True)),
            ],
            options={
                'verbose_name': 'Punto de prueba de Speedtest.com',
                'verbose_name_plural': 'Puntos de prueba de Speedtest.com',
            },
            bases=('simon_app.testpoint',),
        ),
        migrations.CreateModel(
            name='Success',
            fields=[
                ('notification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='simon_app.Notification')),
            ],
            bases=('simon_app.notification',),
        ),
        migrations.CreateModel(
            name='TracerouteHop',
            fields=[
                ('results_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='simon_app.Results')),
                ('traceroute_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='simon_app.TracerouteResult')),
            ],
            bases=('simon_app.results',),
        ),
        migrations.CreateModel(
            name='V6PerfMonthly',
            fields=[
                ('v6perf_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='simon_app.V6Perf')),
            ],
            bases=('simon_app.v6perf',),
        ),
        migrations.AddField(
            model_name='images_in_testpoints',
            name='testPoint',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='simon_app.TestPoint'),
        ),
        migrations.AddField(
            model_name='country',
            name='region',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='simon_app.Region'),
        ),
        migrations.AddField(
            model_name='httpscheck',
            name='test_point',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='simon_app.SpeedtestTestPoint'),
        ),
        migrations.CreateModel(
            name='ProbeApiRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_1', models.DateTimeField(default=datetime.datetime.now, help_text=b'Datetime this test was requested to the platform')),
                ('date_2', models.DateTimeField(default=datetime.datetime.now, help_text=b'Last datetime this results was requested from the platform')),
                ('probeapi_id', models.CharField(max_length=1024)),
                ('reply_1', models.TextField(help_text=b'JSON payload as a text field. This should be JSONField in higher versions of PostgreSQL')),
                ('reply_2', models.TextField(help_text=b'JSON payload as a text field. This should be JSONField in higher versions of PostgreSQL')),
                ('stage_requested', models.BooleanField(default=False, help_text=b'Determines is a test results has already been collected from the ProbePAI platform')),
                ('stage_collected', models.BooleanField(default=False, help_text=b'Determines is a test results has already been collected from the ProbePAI platform')),
            ],
        )
    ]
